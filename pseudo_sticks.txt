Design of Game of Sticks Using Pseudocode

Classes:
    Game:
        initialize number of sticks from input (int)
        figure out if playing pvp or pvAI (str)
        first player is prompted with starting number of sticks
        told to remove 1-3 (int)
        then player two is told the updated amount of sticks (str with int)
        until the last stick is removed, this continues (while sticks >0)
        when last stick is removed, the game ends (lose())
        says who won and asks if you want to replay (replay)
    AI
        replaces a player in the game
        initialize hatlist
        needs to have chance to guess 1-3 at random from each possible stickcount
        keep track of all guesses for a game
        see if win/lose
        need to add or remove guesses from hat list based on w/l
        ask to rerun game
        if rerun, use updated hatlist to help the AI 'learn'
    Hat
        
    Attributes:
            initial number of sticks (int)
            previous hat feedback (list of tuples)

        [(1, [1,2,3]), (2, [1,2,3]), (3, [1,2,3]), (4, [1, 2, 3]).....]
        if list[-1][0] < initial_sticks, extend list with tuples
        initial_sticks - list[-1][0] = number need to add. get range((list[-1][0]+1), initial_sticks)
        for each # in range, create (#, [1,2,3]) and extend list with it.

        for each turn, remember index position of relevant tuple, and what output was

        for a given turn, get random.choice(list[current_sticks - 1][1])
        create variable: possible additions or subtractions (paos)= [(current_sticks - 1), random output]

        if ai wins:
            add back two of each winning choice to each hat
            list[(paos[0])][1].extend(paos[1]*2)
            list[(paos[2])]
            list[(paos[4])]

        elif ai loses:
            remove the losing chose from each hat
            if list[(paos[0])][1] remove(random output)


    Errorcatching

    Nosetests
